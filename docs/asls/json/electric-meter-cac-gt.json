{
  "gtr_asl": "001",
  "type_name": "electric.meter.cac.gt",
  "version": "001",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Type for tracking  Electric Meter ComponentAttributeClasses. GridWorks Spaceheat SCADA uses the GridWorks GNodeRegistry structures and abstractions for managing relational device data. The Cac, or ComponentAttributeClass, is part of this structure.",
  "url": "https://g-node-registry.readthedocs.io/en/latest/component-attribute-class.html",
  "properties": {
    "ComponentAttributeClassId": {
      "type": "string",
      "format": "UUID4Str",
      "title": "ComponentAttributeClassId",
      "description": "Unique identifier for the device class (aka 'cac' or Component Attribute Class). Authority is maintained by the World Registry.",
      "required": true
    },
    "MakeModel": {
      "type": "string",
      "format": "spaceheat.make.model",
      "title": "MakeModel",
      "description": "The brand name identifier for the electric meter (what you would specify in order to buy one).",
      "required": true
    },
    "DisplayName": {
      "type": "string",
      "description": "Sample: EGauge 4030",
      "required": false
    },
    "TelemetryNameList": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "format": "spaceheat.telemetry.name",
      "title": "TelemetryNames read by this power meter",
      "required": true
    },
    "MinPollPeriodMs": {
      "type": "integer",
      "description": "Poll Period refers to the period of time between two readings by the local actor. This is in contrast to Capture Period, which refers to the period between readings that are sent up to the cloud (or otherwise saved for the long-term).",
      "required": true
    },
    "DefaultBaud": {
      "type": "integer",
      "required": false
    },
    "TypeName": {
      "type": "string",
      "value": "electric.meter.cac.gt",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "001",
      "required": true
    }
  },
  "formats": {
    "UUID4Str": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "PositiveInteger": {
      "type": "string",
      "description": "Must be positive when interpreted as an integer. Interpretation as an integer follows the pydantic rules for this - which will round down rational numbers. So 1.7 will be interpreted as 1 and is also fine, while 0.5 is interpreted as 0 and will raise an exception.",
      "example": ""
    }
  }
}
