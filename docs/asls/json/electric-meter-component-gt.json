{
  "gtr_asl": "001",
  "type_name": "electric.meter.component.gt",
  "version": "001",
  "owner": "gridworks@gridworks-consulting.com",
  "description": "Type for tracking Electric Meter Components. Designed for specific instances of Electric Meters. It extends the component.gt.000 type. Authority for the attributes of the component.gt.000 (ComponentId, ComponentAttributeClassId, DisplayName, HwUid) belongs to the WorldRegistry. The WorldRegistry is part of the GridWorks 'BackOffice' structure for managing relational device data . Notably, ComponentId and ComponentAttributeClass are both required and immutable. HwUid is optional but once it is set to a non-null value that is also immutable - it is meant to be an immutable identifier associated to a specific physical device, ideally one that can be read remotely by the SCADA and also by the naked eye. The DisplayName is mutable, with its current value in time governed by the WorldRegistry.",
  "url": "https://g-node-registry.readthedocs.io/en/latest/electric-meters.html",
  "properties": {
    "ComponentId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "Component Id",
      "description": "Primary GridWorks identifier for a specific physical instance of an ElectricMeter, and also as a more generic Component.",
      "required": true
    },
    "ComponentAttributeClassId": {
      "type": "string",
      "format": "UuidCanonicalTextual",
      "title": "Unique identifier for ElectricMeterCac object articulated by the electric.meter.cac.gt.000 type.",
      "description": "Unique identifier for the device class. Authority for these, as well as the relationship between Components and ComponentAttributeClasses (Cacs) is maintained by the World Registry.",
      "required": true
    },
    "DisplayName": {
      "type": "string",
      "description": "Sample: Oak EGauge6074",
      "required": false
    },
    "ConfigList": {
      "type": "array",
      "items": {
        "type": "channel.config.000"
      },
      "description": "Information re timing of data polling and capture for the channels read by the node (i.e. channels that convey power, current, voltage, frequency for various power consuming elements of the system).",
      "required": true
    },
    "HwUid": {
      "type": "string",
      "description": "For eGauge, use what comes back over modbus address 100.",
      "required": false
    },
    "ModbusHost": {
      "type": "string",
      "required": false
    },
    "ModbusPort": {
      "type": "integer",
      "format": "PositiveInteger",
      "title": "",
      "required": false
    },
    "EgaugeIoList": {
      "type": "array",
      "items": {
        "type": "egauge.io.001"
      },
      "description": "This should be empty unless the MakeModel of the corresponding component attribute class is EGauge 4030. The channels that can be read from an EGauge 4030 are configurable by the person who installs the device. The information is encapsulated in a modbus map provided by eGauge as a csv from a device-specific API. The EGaugeIoList maps the data from this map to the data that the SCADA expects to see.",
      "required": true
    },
    "TypeName": {
      "type": "string",
      "value": "electric.meter.component.gt",
      "title": "The type name"
    },
    "Version": {
      "type": "string",
      "title": "The type version",
      "default": "001",
      "required": true
    }
  },
  "axioms": {
    "Axiom1": {
      "title": "Modbus consistency",
      "description": "ModbusHost is None if and only if ModbusPort is None"
    },
    "Axiom2": {
      "title": "Egauge4030 Means Modbus",
      "description": "If the EgaugeIoList has non-zero length, then the ModbusHost is not None"
    },
    "Axiom3": {
      "title": "Channel Name Consistency",
      "description": "If the EgaugeIoList has non-zero length: 1) Len(EgaugeIoList) == Len(ConfigList) 2) There are no duplicates of ChannelName in the ConfigList or EgaugeIoList 3) The set of ChannelNames in IoConfig is equal to the set of ChannelNames in ConfigList"
    }
  },
  "formats": {
    "UuidCanonicalTextual": {
      "type": "string",
      "description": "A string of hex words separated by hyphens of length 8-4-4-4-12.",
      "example": "652ba6b0-c3bf-4f06-8a80-6b9832d60a25"
    },
    "PositiveInteger": {
      "type": "string",
      "description": "Must be positive when interpreted as an integer. Interpretation as an integer follows the pydantic rules for this - which will round down rational numbers. So 1.7 will be interpreted as 1 and is also fine, while 0.5 is interpreted as 0 and will raise an exception.",
      "example": ""
    }
  }
}
